#!/bin/bash -e
# vim:se tw=78 ai ts=2 sts=2 et:
##############################################################################
# Copyright (C) Osamu Aoki <osamu@debian.org>
# License: GPL 2+
# This is not a POSIX script since we need array feature
# This requires bash version 4.1+
##############################################################################
# fd=999 not used elsewhere in this script.
exec 999< "$0"
if ! flock --nonblock 999 ; then
  echo "${0##*/} already running.  Try later" >&2
  exit 2
fi
SIM=""
# Verbose level, 1 through 5.
declare -i VERBOSE_LEVEL=2
# 1     Quiet           Print fatal errors only
# 2     Default         Print errors and warnings only
# 3     Verbose         Show equivalent shell commands being executed
# 4     Extra Verbose   Show extra verbose information
# 5     Debug mode      Everything
# Normally set from command line.  Override it by un-commenting the following.
USER=$(id -un)
if [ "$USER" = "root" ]; then
  RSBU_CONF="@SYSCONFDIR@/rsbu.conf"
else
  if [ -e .rsbu.conf ]; then
    # if found in current directory, use it.
    RSBU_CONF=.rsbu.conf
  else
    # unquoted to ensure tilde expansion
    RSBU_CONF=~/.rsbu.conf
  fi
fi
while [ -n "$1" ] ; do
  case $1 in
    -c) shift
      RSBU_CONF=$1
      ;;
    -x) set -x
      ;;
    -s) SIM="echo"
      ;;
    -q) VERBOSE_LEVEL-=1
      ;;
    -vvv) VERBOSE_LEVEL+=3
      ;;
    -vv) VERBOSE_LEVEL+=2
      ;;
    -v) VERBOSE_LEVEL+=1
      ;;
    *) break
      ;;
  esac
  shift
done
##############################################################################
# internal functions
##############################################################################
vecho () {
if [ $VERBOSE_LEVEL -ge "$1" ]; then
  shift
  echo "$*" >&2
fi
}

now_string () {
  date -u -Iseconds
}

now_epoch () {
  date +%s
}

string_epoch () {
  date +%s -d"$1"
}

epoch_string () {
  date -u -Iseconds -d@"$1"
}

rsbu_age () {
local -i x=$1
local -i i
local -i j
local -i y
for i in ${!RANGE[*]}; do
  if [ "$x" -le 0 ]; then
    echo 0
  elif [ "$i" != 0 ] && [ "$x" -le "${RANGE[$i]}" ]; then
    j=$i-1
    y=$(( (x-${RANGE[$j]})/${INTVL[$j]}+${OFFSET[$j]} ))
    vecho 5 "    RANGE=$i(${RANGE[$j]} - ${RANGE[$i]}), INTVL=${INTVL[$j]}, OFFSET=${OFFSET[$j]}: $x ==> $y "
    echo $y
    return
  fi
done
y=$(( (x-${RANGE[$i]})/${INTVL[$i]}+${OFFSET[$i]} ))
vecho 5 "    RANGE=$i(${RANGE[$j]} - ${RANGE[$i]}), INTVL=${INTVL[$j]}, OFFSET=${OFFSET[$j]}: $x ==> $y "
echo $y
return
}

sanity () {
# sanity check and derivative constants
local -i i
if [ ${#RANGE[*]} -lt 2 ] || \
   [ ${#INTVL[*]} -lt 2 ] || \
   [ ${#RANGE[*]} != ${#INTVL[*]} ]; then
  vecho 1 "Wrong number of #RANGE, #INTVL: ${#RANGE[*]}, ${#INTVL[*]}"
  exit
fi
if [ -z "$RSBU_ROOT_DIR" ]; then
  vecho 1 "RSBU_ROOT_DIR undefined"
  exit
fi
if [ -z "$INITIAL_AGE" ]; then
  vecho 1 "INITIAL_AGE undefined"
  exit
fi
if [ "$INITIAL_AGE" -lt 0 ]; then
  vecho 1 "INITIAL_AGE must be >=0 but INITIAL_AGE='$INITIAL_AGE'"
  exit
fi
if [ ! -d "$RSBU_ROOT_DIR" ]; then
  mkdir -p "$RSBU_ROOT_DIR"
fi
chown "$USER" "$RSBU_ROOT_DIR"
chmod 700 "$RSBU_ROOT_DIR"

vecho 3 "rsbu: RSBU_CONF=$RSBU_CONF RSBU_ROOT_DIR=$RSBU_ROOT_DIR"
if [ "$SIM" = "echo" ]; then
  vecho 4 "Simulation: ON"
elif [ -z "$SIM" ]; then
  vecho 4 "Simulation: OFF"
else
  vecho 1 "Unthinkable: \$SIM='$SIM'"
fi
vecho 4 "User: $UID"
vecho 4 "VERBOSE_LEVEL; $VERBOSE_LEVEL"
}

rsbu_prune () {
ARG1="$1" # if set, no actual prune and list only
now=$(now_epoch) # epoch for now
declare -a LS=( $(cd "$RSBU_ROOT_DIR"; ls -1rd BU_*) )
vecho 3 "   $(epoch_string "$now") <== current time"
vecho 3 "======================================================"
if [ ${#LS[*]} = 0 ]; then
  vecho 2 "No backup data found"
  exit 1
fi

declare -a good
declare -a state
t="*error*"
jmax=$((${#LS[*]} - 1))
p=${LS[$jmax]}
del=$(( now - $(string_epoch "${p##BU_}") ))
age=$(rsbu_age $del)
agex=$((age +1)) # start from infinity

# 1st pass (backward!)
for i in ${!LS[@]}; do
  j=$((jmax - i)) # reverse index
  p=${LS[$j]}
  del=$(( now - $(string_epoch "${p##BU_}") ))
  age=$(rsbu_age $del)
  if [ $agex -gt "$age" ];then
    # age is different
    if [ -e "$RSBU_ROOT_DIR/$p/rsbu_success" ]; then
      state[$j]="oldest"
      agex="$age"
    else
      state[$j]=""
    fi
  else
    # age is same
    state[$j]=""
  fi
  if [ -e "$RSBU_ROOT_DIR/$p/rsbu_success" ]; then
    good[$j]="success"
  else
    good[$j]="*error*"
  fi
done

# 2nd pass (forward)
for i in ${!LS[@]}; do
  if [ "${good[$i]}" = "success" ]; then
    if [ -z "${state[$i]}" ]; then
      state[$i]="first success"
    else
      state[$i]+=", first success"
    fi
    break
  else
    if [ -z "${state[$i]}" ]; then
      state[$i]="inital error"
    else
      state[$i]+=", inital error"
    fi
  fi
done

# 3rd pass (forward)
for i in ${!LS[@]}; do
  p=${LS[$i]}
  del=$(( now - $(string_epoch "${p##BU_}") ))
  age=$(rsbu_age $del)
  if [ "$age" -le "$INITIAL_AGE" ]; then
    if [ -z "${state[$i]}" ]; then
      state[$i]="inital age"
    else
      state[$i]+=", inital age"
    fi
  else
    break
  fi
done

# 4th pass (backward)
for i in ${!LS[@]}; do
  j=$((jmax - i)) # reverse index
  if [ "${good[$j]}" = "success" ]; then
    break
  else
    if [ -z "${state[$j]}" ]; then
      state[$j]="tail error"
    else
      state[$j]+=", tail error"
    fi
  fi
done

# 5th pass (forward)
for i in ${!LS[@]}; do
  p=${LS[$i]}
  del=$(( now - $(string_epoch "${p##BU_}") ))
  age=$(rsbu_age $del)
  if [ -n "${state[$i]}" ]; then
    echo "$p del=$del age=$age backup=${good[$i]} (${state[$i]})"
  elif [ -n "$1" ]; then # "list"
    echo "$p del=$del age=$age backup=${good[$i]} (*** ******* ***)"
  else
    vecho  4 "  removing whole directory tree: $RSBU_ROOT_DIR/$p"
    $SIM rm -rf "$RSBU_ROOT_DIR/$p" 2>/dev/null >/dev/null || true
    if [ -d "$RSBU_ROOT_DIR/$p" ]; then
      # remove write protection from directories first
      vecho  5 "  make directory writable recursively under: $RSBU_ROOT_DIR/$p"
      $SIM find  "$RSBU_ROOT_DIR/$p" -type d -exec chmod u+w "{}" \;
      vecho  5 "  removing whole directory tree again: $RSBU_ROOT_DIR/$p"
      $SIM rm -rf "$RSBU_ROOT_DIR/$p"
    fi
    echo "$p del=$del age=$age backup=${good[$i]} (*** removed ***)"
  fi
done
}

rsbu_help () {
echo "NAME"
echo "    ${0##*/} -- rsync backup helper"
echo
echo "SYNOPSIS"
echo "    ${0##*/} [-s|-x|-q|-v|-c <conf_file>] [backup|list|prune|help]"
echo
echo "DESCRIPTION"
echo "    -s      simulated backup/prune without actual backup/prune"
echo "    -x      trace shell command for debug"
echo "    -q      quiet"
echo "    -v      verbose"
echo "    -vv     very verbose"
echo "    -vvv    extremely verbose"
echo "    -c <conf_file>  use specified configuration file instead"
echo "    backup: backup data specified by \$RSYNC_SRC in $RSBU_CONF"
echo "    list:   list backed up data in $RSBU_ROOT_DIR"
echo "    prune:  prune old backed up data in $RSBU_ROOT_DIR"
echo
echo "Copyright 2018 Osamu Aoki <osamu@debian.org>, GPL 2+"
}

##############################################################################
# constants
TIMESTAMP="BU_$(now_string)"
if [ ! -e "$RSBU_CONF" ]; then
  vecho 1 "Can't find configuration file: $RSBU_CONF for user=$USER"
  exit 1
fi
source "$RSBU_CONF"
sanity
##############################################################################
# offset for age
declare -i i
declare -i j
declare -a OFFSET
for i in ${!RANGE[*]}; do
  if [ "$i" = 0 ]; then
    OFFSET[$i]=0
  else
    j=$i-1
    OFFSET[$i]=$(( (${RANGE[$i]}-${RANGE[$j]})/${INTVL[$j]}+${OFFSET[$j]} ))
  fi
done
##############################################################################
if [ -z "$*" ]; then
  rsbu_help
  exit
fi
for x in "$@" ; do
  case $x in
    h*) rsbu_help
      ;;
    b*) rsbu_backup
      ;;
    p*) rsbu_prune
      ;;
    l*) rsbu_prune simulate # list
      ;;
    *) echo "Unknown command: '$x'"
      rsbu_help
      exit
      ;;
  esac
  shift
done

