#!/bin/bash -e
# vim:se tw=78 ai ts=2 sts=2 et:
##############################################################################
# Copyright (C) Osamu Aoki <osamu@debian.org>
# License: GPL 2+
# This is not a POSIX script since we need array feature
# This requires bash version 4.1+
##############################################################################
# fd=999 not used elsewhere in this script.
exec 999< "$0"
if ! flock --nonblock 999 ; then
  echo "${0##*/} already running.  Try later" >&2
  exit 2
fi
SIM=""
# Verbose level, 1 through 5.
declare -i VERBOSE_LEVEL=2
# 1     Quiet           Print fatal errors only
# 2     Default         Print errors and warnings only
# 3     Verbose         Show equivalent shell commands being executed
# 4     Extra Verbose   Show extra verbose information
# 5     Debug mode      Everything
# Normally set from command line.  Override it by un-commenting the following.
USER=$(id -un)
if [ "$USER" = "root" ]; then
  RSBU_CONF="@SYSCONFDIR@/rsbu.conf"
else
  # unquoted to ensure tilde expansion
  RSBU_CONF=~/.rsbu.conf
fi
while [ -n "$1" ] ; do
  case $1 in
    -c) shift
      RSBU_CONF=$1
      ;;
    -x) set -x
      ;;
    -s) SIM="echo"
      ;;
    -q) VERBOSE_LEVEL-=1
      ;;
    -vvv) VERBOSE_LEVEL+=3
      ;;
    -vv) VERBOSE_LEVEL+=2
      ;;
    -v) VERBOSE_LEVEL+=1
      ;;
    --) shift
      break
      ;;
    *) break
      ;;
  esac
  shift
done
##############################################################################
# internal functions
##############################################################################
vecho () {
if [ $VERBOSE_LEVEL -ge $1 ]; then
  shift
  echo "$*" >&2
fi
}

if [ "$SIM" = "echo" ]; then
  vecho 4 "Simulation: ON"
elif [ -z "$SIM" ]; then
  vecho 4 "Simulation: OFF"
else
  vecho 1 "Unthinkable: \$SIM='$SIM'"
fi
vecho 4 "User: $UID"
vecho 3 "Using configuration file: $RSBU_CONF"
vecho 4 "VERBOSE_LEVEL; $VERBOSE_LEVEL"

now_string () {
  date -u -Iseconds
}

now_epoch () {
  date +%s
}

string_epoch () {
  date +%s -d"$1"
}

epoch_string () {
  date -u -Iseconds -d@"$1"
}

age () {
local -i x=$1
local -i i
local -i j
local -i y
for i in ${!RANGE[*]}; do
  if [ $x -le 0 ]; then
    echo 0
  elif [ $i != 0 ] && [ $x -le ${RANGE[$i]} ]; then
    j=$i-1
    y=$(( ($x-${RANGE[$j]})/${INTVL[$j]}+${OFFSET[$j]} ))
    vecho 5 "    RANGE=$i(${RANGE[$j]} - ${RANGE[$i]}), INTVL=${INTVL[$j]}, OFFSET=${OFFSET[$j]}: $x ==> $y "
    echo $y
    return
  fi
done
y=$(( ($x-${RANGE[$i]})/${INTVL[$i]}+${OFFSET[$i]} ))
vecho 5 "    RANGE=$i(${RANGE[$j]} - ${RANGE[$i]}), INTVL=${INTVL[$j]}, OFFSET=${OFFSET[$j]}: $x ==> $y "
echo $y
return
}

sanity () {
# sanity check and derivative constants
if [ ${#RANGE[*]} -lt 2 ] || \
   [ ${#INTVL[*]} -lt 2 ] || \
   [ ${#RANGE[*]} != ${#INTVL[*]} ]; then
  vecho 1 "Wrong number of #RANGE, #INTVL: ${#RANGE[*]}, ${#INTVL[*]}"
  exit
fi
if [ -z "RSBU_ROOT_DIR" ]; then
  vecho 1 "RSBU_ROOT_DIR undefined"
  exit
fi
if [ -z "INITIAL_AGE_STEP" ]; then
  vecho 1 "INITIAL_AGE_STEP undefined"
  exit
fi
if [ ! -d $RSBU_ROOT_DIR ]; then
  mkdir -p $RSBU_ROOT_DIR
fi
chown $USER $RSBU_ROOT_DIR
chmod 700 $RSBU_ROOT_DIR
}

rsbu_prune () {
ARG1=$1 # if set, no actual prune
n=$(now_epoch) # epoch for now
cd "$RSBU_ROOT_DIR"
LS=$(cd "$RSBU_ROOT_DIR"; ls -1rd BU_*)
echo "Now:   $(now_string) epoch=$n"
echo "======================================================"
s=$INITIAL_SKIP_AGE
px="" # previous directory string
qx="" # previous epoch from directory string
rx=-1 # previous age (initial=-1)
for p in $LS; do
  q=$(string_epoch ${p##BU_})
  r=$(age $(($n-$q)))
  vecho 4 "  Age: $r for $p ($q)"
  if [ -z "$px" ]; then
    vecho 3 "  age=$r (no action for the latest backup)"
  elif [ $INITIAL_SKIP_AGE -ge $r ]; then
    # Keep initial age backup
    vecho 3 "  age=$r (no action if age <= $INITIAL_SKIP_AGE)"
    echo "+ $px epoch=$qx age=$rx (initial)"
  elif [ $s -lt $r ]; then
    # new age, keep last $p (current $px)
    vecho 3 "  age=$s --> $r (no action when age is updated)"
    s=$r
    echo "+ $px epoch=$qx age=$rx (oldest)"
  else
    vecho 3 "  age=$s !-> $r (remove older backup when age isn't updated)"
    # same age
    if [ -z "$ARG1" ]; then
      vecho  4 "  removing whole directory tree: $RSBU_ROOT_DIR/$px"
      rm -rf "$RSBU_ROOT_DIR/$px" 2>/dev/null >/dev/null || true
      if [ -d "$RSBU_ROOT_DIR/$px" ]; then
        # remove write protection from directories first
        vecho  4 "  make directory writable recursively under: $RSBU_ROOT_DIR/$px"
        find  "$RSBU_ROOT_DIR/$px" -type d -exec chmod u+w "{}" \;
        vecho  4 "  removing whole directory tree again: $RSBU_ROOT_DIR/$px"
        rm -rf "$RSBU_ROOT_DIR/$px"
      fi
      if [ -d "$RSBU_ROOT_DIR/$px" ]; then
        echo "! $px epoch=$qx age=$rx (!!! not removed completely!!!)"
      else
        echo "_ $px epoch=$qx age=$rx (*** removed ***)"
      fi
    else
      echo "- $px epoch=$qx age=$rx"
    fi
  fi
  px=$p
  qx=$q
  rx=$r
done
vecho 3 "  age=$r (keep the oldest backup always)"
echo "+ $p epoch=$q age=$r (last)"
}

rsbu_help () {
echo "NAME"
echo "    ${0##*/} -- rsync backup helper"
echo "SYNOPSIS"
echo "    ${0##*/} [-s|-x|-q|-v|-c <conf_file>] [--] [backup|list|prune|test|help]"
}

##############################################################################
# constants
TIMESTAMP="BU_$(now_string)"
if [ ! -e $RSBU_CONF ]; then
  vecho 1 "Can't find configuration file: $RSBU_CONF for user=$USER"
  exit 1
fi
source $RSBU_CONF
sanity
##############################################################################
# offset for age
declare -i i
declare -i j
declare -a OFFSET
for i in ${!RANGE[*]}; do
  if [ $i = 0 ]; then
    OFFSET[$i]=0
  else
    j=$i-1
    OFFSET[$i]=$(( (${RANGE[$i]}-${RANGE[$j]})/${INTVL[$j]}+${OFFSET[$j]} ))
  fi
done
##############################################################################
if [ -z "$*" ]; then
  rsbu_help
  exit
fi
for x in "$@" ; do
  case $x in
    h*) rsbu_help
      ;;
    b*) rsbu_backup
      ;;
    s*) : # sanity 
      ;;
    p*) rsbu_prune
      ;;
    l*) rsbu_prune simulate # list
      ;;
    *) echo "Unknown command: '$x'"
      rsbu_help
      exit
      ;;
  esac
  shift
done

